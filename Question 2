# Question 2: Loading MNIST data
def parse_mnist(image_filesname, label_filename):
    """ Read an images and labels file in MNIST format.  See this page:
    http://yann.lecun.com/exdb/mnist/ for a description of the file format.

    Args:
        image_filename (str): name of gzipped images file in MNIST format
        label_filename (str): name of gzipped labels file in MNIST format

    Returns:
        Tuple (X,y):
            X (numpy.ndarray[np.float32]): 2D numpy array containing the loaded
                data.  The dimensionality of the data should be
                (num_examples x input_dim) where 'input_dim' is the full
                dimension of the data, e.g., since MNIST images are 28x28, it
                will be 784.  Values should be of type np.float32, and the data
                should be normalized to have a minimum value of 0.0 and a
                maximum value of 1.0.

            y (numpy.ndarray[dypte=np.uint8]): 1D numpy array containing the
                labels of the examples.  Values should be of type np.uint8 and
                for MNIST will contain the values 0-9.
    """
    ### BEGIN YOUR CODE
    
    import numpy as np
    import struct   #处理二进制文件
    
    #####################################################
    ## 解析idx3(image)文件
    bin_data = open(image_filesname, 'rb').read()     # 读取二进制数据

    # 解析文件头信息，依次为魔数、图片数量、每张图片高、每张图片宽，这里未对魔数进行存储，因此struct.unpack_from的第一个返回值为_
    offset = 0
    fmt_header = '>iiii'     #这里的i代表整型数据，四个i代表有四个整形数字，>是为了解决对齐问题加入的字符
    #struct.unpack_from(fmt=,buffer=,offset=) 该函数可以将缓冲区buffer中的内容在按照指定的格式fmt='somenformat'，
    #从偏移量为offset=numb的位置开始进行读取。返回的是一个对应的元组tuple
    _, num_images, num_rows, num_cols = struct.unpack_from(fmt_header, bin_data, offset)
    print('图片数量: %d张, 图片大小: %d*%d' % (num_images, num_rows, num_cols))

    # 解析数据集
    image_size = num_rows * num_cols
    offset += struct.calcsize(fmt_header)    #calcsize(fmt) -> integer  计算给定的格式(fmt)占用多少字节的内存
    fmt_image = '>' + str(image_size) + 'B'#读取一张图片需要的字节数
    images = np.empty((num_images, num_rows, num_cols))
    for i in range(num_images):
        images[i] = np.array(struct.unpack_from(fmt_image, bin_data, offset)).reshape((num_rows, num_cols))
        offset += struct.calcsize(fmt_image)
    
    # 按照要求修改images大小、格式
    images = images.reshape(-1, 784).astype(np.float32)   # 将图片数据reshape成 60000*784 的 2D numpy array
    max_num = np.max(images)
    min_num = np.min(images)
    scale = max_num - min_num
    images = images / scale

    '''
    # 下面是按照每个图片进行归一化，但是这样过不了测试
    for idx, sample in enumerate(images): # 数据规范化至0.0 - 1.0
        max_num = max(sample)
        min_num = min(sample)
        scale = max_num - min_num
        if scale == 0:
            continue
        images[idx] = sample / scale 
    '''
    ###############################################
        
    ###############################################    
    ## 解析idx1(label) 文件
    # 读取二进制数据
    bin_data = open(label_filename, 'rb').read()

    # 解析文件头信息，依次为魔数和标签数，这里的魔数也未存储
    offset = 0
    fmt_header = '>ii'
    _, num_images = struct.unpack_from(fmt_header, bin_data, offset)
    print('图片数量: %d张' % (num_images))

    # 解析数据集
    offset += struct.calcsize(fmt_header)
    fmt_image = '>B'
    labels = np.empty(num_images)
    for i in range(num_images):
        labels[i] = struct.unpack_from(fmt_image, bin_data, offset)[0]
        offset += struct.calcsize(fmt_image)    
    
    # 修改label元素值的类型为np.uint8
    labels = labels.astype(np.uint8)
    ##################################################
    
    return (images, labels)

    ### END YOUR CODE
